*&---------------------------------------------------------------------*
*&  Include           ZPB2040F01
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  GET_MONTHLY_SUMMARY
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
*FORM get_monthly_summary .
*
*
*  IF so_cdate-low IS NOT INITIAL AND so_cdate-high IS NOT INITIAL.
*    CLEAR gt_month_summary.
*
*    " 1. INNER JOIN으로 전기일자에 해당하는 아이템 전표 조회 (집계를 위한 기본 조회)
*    SELECT
*      a~jocum,
*      a~itnum,
*      a~glacc,
*      a~dbcrf,
*      a~price,
*      a~pokey,
*      a~waers,
*      a~descr,
*      a~cflag,
*      a~cljocum,
*      a~cldate,
*      b~pdate
*      FROM ztpbjonli AS a
*      INNER JOIN ztpbjonlh AS b
*        ON a~jocum = b~jocum
*      INTO TABLE @DATA(gt_joined)
*      WHERE b~pdate BETWEEN @so_cdate-low AND @so_cdate-high.
*
*    " 2. 월별 집계
*
*    LOOP AT gt_joined INTO DATA(ls_row).
*      DATA(lv_month) = ls_row-pdate+0(6).
*
*      READ TABLE gt_month_summary ASSIGNING <fs> WITH KEY year_month = lv_month.
*      IF sy-subrc <> 0.
*        CLEAR gs_month_summary.
*        gs_month_summary-year_month = lv_month.
*        gs_month_summary-count_total = 0.
*        gs_month_summary-count_done = 0.
*        gs_month_summary-count_pending = 0.
*        gs_month_summary-rate_done = 0.
*        APPEND gs_month_summary TO gt_month_summary.
*        READ TABLE gt_month_summary ASSIGNING <fs> WITH KEY year_month = lv_month.
*      ENDIF.
*
*      " 전체 전표 건수 집계
*      <fs>-count_total = <fs>-count_total + 1.
*
*      " 반제 완료/미완료 건수 집계
*      IF ls_row-cflag = 'X'.
*        <fs>-count_done = <fs>-count_done + 1.
*      ELSEIF ls_row-cflag = ''.
*        <fs>-count_pending = <fs>-count_pending + 1.
*      ENDIF.
*    ENDLOOP.
*
*    " 3. 완료율 계산
*    LOOP AT gt_month_summary ASSIGNING <fs>.
*      IF <fs>-count_total > 0.
*        <fs>-rate_done = ( <fs>-count_done * 100 ) / <fs>-count_total.
*      ENDIF.
*    ENDLOOP.
*
*    " 4. 출력
*
*    " 출력 전 조건 체크
*    IF so_cdate-low+0(6) <> so_cdate-high+0(6).
*      MESSAGE i000(zmcpb) WITH '한 달 단위로만 조회 가능합니다.'.
*      RETURN.
*    ENDIF.
*
*    READ TABLE gt_month_summary WITH KEY year_month = lv_month TRANSPORTING NO FIELDS.
*    IF sy-subrc <> 0.
*      MESSAGE i000(zmcpb) WITH '입력하신 해당 월에 반제된 전표가 존재하지 않습니다.'.
*      EXIT.
*    ENDIF.
**
*    " ALV 출력
*    DATA: to_alv TYPE REF TO cl_salv_table.
*
*    cl_salv_table=>factory(
*      IMPORTING r_salv_table = to_alv
*      CHANGING  t_table      = gt_month_summary
*    ).
*
*    to_alv->get_columns( )->get_column( 'YEAR_MONTH'   )->set_long_text( '조회 년월' ).
*    to_alv->get_columns( )->get_column( 'COUNT_TOTAL'  )->set_long_text( '전체 전표 개수' ).
*    to_alv->get_columns( )->get_column( 'COUNT_DONE'   )->set_long_text( '반제 완료 전표 개수' ).
*    to_alv->get_columns( )->get_column( 'COUNT_PENDING')->set_long_text( '반제 미완료 전표 개수' ).
*    to_alv->get_columns( )->get_column( 'RATE_DONE'    )->set_long_text( '반제 완료율(%)' ).
*
*    to_alv->display( ).
*
*  ENDIF.
*
*ENDFORM.
**&---------------------------------------------------------------------*
**&      Form  GET_DETAILED_CLEARING
**&---------------------------------------------------------------------*
**       text
**----------------------------------------------------------------------*
**  -->  p1        text
**  <--  p2        text
**----------------------------------------------------------------------*
*FORM get_detailed_clearing .
*
*  DATA: lv_gname TYPE char50,
*        lv_glacc TYPE n LENGTH 8.
*
*  " 반제 전표 번호로 검색하면 반제 전표 번호와 일치하는 전표끼리 조회되도록
*  IF so_cljo-low IS NOT INITIAL OR so_cljo-high IS NOT INITIAL.
*
*    SELECT
*    jocum
*    itnum
*    glacc
*    dbcrf
*    price
*    pokey
*    waers
*    descr
*    cflag
*    cljocum
*    cldate
*      FROM ztpbjonli
*      INTO CORRESPONDING FIELDS OF TABLE gt_list
*    WHERE cflag = 'X'
*     AND cljocum IN so_cljo. " 반제전표번호 search help
*
*    " 계정과목명 불러오기
*    LOOP AT gt_list INTO gs_list.
*      lv_glacc = gs_list-glacc.
*      CALL FUNCTION 'ZFMPB_GET_GLACC_NAME'
*        EXPORTING
*          iv_glacc         = lv_glacc
*        IMPORTING
*          ev_gname         = lv_gname
*        EXCEPTIONS
*          format_exception = 1
*          OTHERS           = 2.
*      IF sy-subrc = 0.
*        gs_list-gname = lv_gname.
*      ELSE.
*        gs_list-gname = '계정과목 코드가 존재하지 않습니다.'.
*      ENDIF.
*      MODIFY gt_list FROM gs_list.
*    ENDLOOP.
*
*  ENDIF.
*
*  IF so_cljo-low IS NOT INITIAL OR so_cljo-high IS NOT INITIAL
*    AND so_cdate-low IS NOT INITIAL AND so_cdate-high IS NOT INITIAL.
*
*    SELECT
*    jocum
*    itnum
*    glacc
*    dbcrf
*    price
*    pokey
*    waers
*    descr
*    cflag
*    cljocum
*    cldate
*      FROM ztpbjonli
*      INTO CORRESPONDING FIELDS OF TABLE gt_list
*    WHERE cflag = 'X'
*      AND cldate IN so_cdate
*     AND cljocum IN so_cljo. " 반제전표번호 search help
*
*    LOOP AT gt_list INTO gs_list.
*      lv_glacc = gs_list-glacc.
*      CALL FUNCTION 'ZFMPB_GET_GLACC_NAME'
*        EXPORTING
*          iv_glacc         = lv_glacc
*        IMPORTING
*          ev_gname         = lv_gname
*        EXCEPTIONS
*          format_exception = 1
*          OTHERS           = 2.
*      IF sy-subrc = 0.
*        gs_list-gname = lv_gname.
*      ELSE.
*        gs_list-gname = '계정과목 코드가 존재하지 않습니다.'.
*      ENDIF.
*      MODIFY gt_list FROM gs_list.
*    ENDLOOP.
*
*  ENDIF.
*
*
*
*ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  CREATE_ALV
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM create_alv .


  CREATE OBJECT go_con
    EXPORTING
      container_name = 'CON'.

  IF sy-subrc <> 0.
    MESSAGE i000(zmcpb) WITH 'Create Custom Container Error'.
  ENDIF.


  CREATE OBJECT go_alv
    EXPORTING
      i_parent = go_con.
  IF sy-subrc <> 0.
    MESSAGE i000(zmcpb) WITH 'Create Alv Error'.
  ENDIF.



ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  DISPLAY_ALV
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM display_alv .

  CALL METHOD go_alv->set_table_for_first_display
    EXPORTING
      i_structure_name = 'ZSPB4023'
*     i_default        = 'X'
      is_layout        = gs_layo
    CHANGING
      it_outtab        = gt_balance
      it_fieldcatalog  = gt_fcat
      it_sort          = gt_sort.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  SET_DEFAULT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM set_default .

  pa_fyear = sy-datum(4).
  pa_fperi = sy-datum+4(2).

  DATA: lv_monday TYPE sy-datum,
        lv_sunday TYPE sy-datum.

  " 오늘이 속한 주의 월요일, 일요일
  lv_monday = sy-datum - ( sy-datum+0(3) * 7 + sy-datum+6(1) - 1 ) MOD 7.
  lv_sunday = lv_monday + 6.

  so_fweek-low = lv_monday.
  so_fweek-high = lv_sunday.
  APPEND so_fweek.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  SET_LAYOUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM set_layout .

  CLEAR gs_layo.

  gs_layo-zebra = 'X'.
*  gs_layo-sel_mode = 'A'.
  gs_layo-cwidth_opt = 'A'.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  SET_SORT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
*FORM set_sort .
*
*  CLEAR gt_sort.
*  gs_sort-spos = '1'.
*  gs_sort-fieldname = 'CLJOCUM'.
*  gs_sort-down = ''. "오름차순
*  APPEND gs_sort TO gt_sort.
*  CLEAR gs_sort.
*
*ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  GET_INFO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM get_info .

"ZTPBGLA 조인
  SELECT glacc gname gtype waers FROM ztpbgla INTO TABLE gt_glmast.

  LOOP AT gt_balance INTO gs_balance.
    READ TABLE gt_glmast WITH KEY glacc = gs_balance-glacc INTO gs_glmast.
    IF sy-subrc = 0.
      gs_balance-gname = gs_glmast-gname.
      gs_balance-gtype = gs_glmast-gtype.
      gs_balance-waers = gs_glmast-waers.
      MODIFY gt_balance FROM gs_balance INDEX sy-tabix.
    ENDIF.
  ENDLOOP.


ENDFORM.

----------------------------------------------------------------------------------
Extracted by Mass Download version 1.5.5 - E.G.Mellodew. 1998-2025. Sap Release 750
