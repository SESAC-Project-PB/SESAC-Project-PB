*&---------------------------------------------------------------------*
*&  Include           MZPB2040I01
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0100  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0100 INPUT.

  CASE ok_code.

    WHEN 'SEARCH'.

      PERFORM get_alv_list.
      PERFORM set_gs_list-light.
      "데이터 SELECT 해오고 세팅을 해줘야 됨
      "LOOP 돌고, MODIFY를 하니까!

    WHEN 'JDETAIL'.

      DATA: lt_rows TYPE lvc_t_row,
            ls_row  TYPE lvc_s_row.

      " 1. 선택된 ALV 행 인덱스 가져오기
      go_alv->get_selected_rows(
        IMPORTING
          et_index_rows = lt_rows
      ).

      " 2. 선택된 행 개수 체크
      IF lines( lt_rows ) < 1.
        MESSAGE i000(zmcpb) WITH '상세조회 할 한 개의 전표를 선택해주세요.'.
        RETURN.
      ELSEIF lines( lt_rows ) > 1.
        MESSAGE i000(zmcpb) WITH '상세조회 할 한 개의 전표만 선택해주세요.'.
        RETURN.
      ENDIF.

      SELECT jocum fyear fperi dtype refdo waers jtype tdate pdate
               FROM ztpbjonlh
               INTO CORRESPONDING FIELDS OF TABLE gt_jhlist.

      SELECT a~jocum a~itnum a~glacc a~dbcrf a~price a~pokey a~waers a~descr a~cflag a~cljocum a~cldate b~gname
           FROM ztpbjonli AS a INNER JOIN ztpbgla AS b ON a~glacc = b~glacc
           INTO CORRESPONDING FIELDS OF TABLE gt_jilist.


      " 3. 선택된 첫 번째 행 인덱스 읽기
      READ TABLE lt_rows INDEX 1 INTO ls_row.


IF sy-subrc = 0.
  " ALV의 실제 내부 인덱스가 아니라 선택한 ALV행의 전표번호(예: selected_jocum)를 얻는다.
  DATA(selected_jocum) = gt_list[ ls_row-index ]-jocum.

        " 4. 선택된 인덱스로 gt_jhlist에서 해당 전표 헤더 정보 읽기
        READ TABLE gt_jhlist WITH KEY jocum = selected_jocum INTO gs_jhlist.

        " 5. 전표 헤더
*        CLEAR gt_jhlist.
        SELECT jocum fyear fperi dtype refdo waers jtype tdate pdate
          FROM ztpbjonlh
          INTO CORRESPONDING FIELDS OF TABLE gt_jhlist
         WHERE jocum = gs_jhlist-jocum.

        " 전표유형명

        DATA: lv_jtype  TYPE zepb_jtype,
              lv_jname  TYPE ddtext,
              wa_jhlist LIKE LINE OF gt_jhlist.

        READ TABLE gt_jhlist INDEX ls_row-index INTO gs_jhlist.
        lv_jtype = gs_jhlist-jtype.

        CALL FUNCTION 'ZFMPB_GET_JTYPE_NAME'
          EXPORTING
            i_jtype  = lv_jtype
          IMPORTING
            name     = lv_jname
          EXCEPTIONS
            no_value = 1
            OTHERS   = 2.

        IF sy-subrc = 0.
          zspb4020-jtype_t = lv_jname.
        ELSE.
          CLEAR lv_jname.
          READ TABLE gt_jhlist WITH KEY jtype = lv_jtype INTO wa_jhlist.
          IF sy-subrc = 0.
            zspb4020-jtype_t = wa_jhlist-jtype_t.
          ENDIF.
        ENDIF.

        zspb4020-jocum = gs_jhlist-jocum.
        zspb4020-fyear = gs_jhlist-fyear.
        zspb4020-fperi = gs_jhlist-fperi.
        zspb4020-refdo = gs_jhlist-refdo.
        zspb4020-waers = gs_jhlist-waers.
        zspb4020-jtype = gs_jhlist-jtype.
        zspb4020-tdate = gs_jhlist-tdate.
        zspb4020-pdate = gs_jhlist-pdate.

        " 6. 전표 아이템
        CLEAR gt_jilist.
        SELECT a~jocum a~itnum a~glacc a~dbcrf a~price a~pokey a~waers a~descr a~cflag a~cljocum a~cldate b~gname
          FROM ztpbjonli AS a INNER JOIN ztpbgla AS b ON a~glacc = b~glacc
          INTO CORRESPONDING FIELDS OF TABLE gt_jilist
         WHERE a~jocum = gs_jhlist-jocum.
      ENDIF.

      " 색깔
      DATA ls_color TYPE lvc_s_scol. " 셀컬러
      LOOP AT gt_jilist INTO gs_jilist.
        CLEAR ls_color.
        IF gs_jilist-dbcrf = 'S'.
          ls_color-fname      = 'PRICE'.
          ls_color-color-col  = 3.  " 노랑
          ls_color-color-int  = 1.  " 진하게
          APPEND ls_color TO gs_jilist-cellcolor.
        ELSEIF gs_jilist-dbcrf = 'H'.
          ls_color-fname      = 'PRICE'.
          ls_color-color-col  = 3.
          ls_color-color-int  = 1.
          APPEND ls_color TO gs_jilist-cellcolor.
        ENDIF.
        MODIFY gt_jilist FROM gs_jilist TRANSPORTING cellcolor.
      ENDLOOP.

      " 7. cflag 값에 따른 아이콘 세팅
      LOOP AT gt_jilist INTO gs_jilist.
        IF gs_jilist-cflag = 'X'.
          gs_jilist-cflagi = '@01@'.   " 체크 아이콘
        ELSE.
          gs_jilist-cflagi = '@02@'.   " X 아이콘
        ENDIF.
        MODIFY gt_jilist FROM gs_jilist TRANSPORTING cflagi.
      ENDLOOP.

      CALL SCREEN 400.

    WHEN 'DETAIL'.

*      DATA: lt_rows TYPE lvc_t_row,
*            ls_rows TYPE lvc_s_row.

      go_alv->get_selected_rows(
     IMPORTING
       et_index_rows = lt_rows    " Indexes of Selected Rows
*          et_row_no     =     " Numeric IDs of Selected Rows
   ).

      IF lines( lt_rows ) < 2.
        MESSAGE i000(zmcpb) WITH '반제할 두 개의 전표를 선택해주세요.'.
        RETURN.
      ELSEIF lines( lt_rows ) > 2.
        MESSAGE i000(zmcpb) WITH '반제할 두 개의 전표만 선택해주세요.'.
        RETURN.
      ENDIF.

      " 헤더 아이템 상세 정보 select
      PERFORM get_header_item_detail_info.

      IF sy-subrc = 0.
        CLEAR: zspb4005-jocum, zspb4005-fperi, zspb4005-pdate.
        CALL SCREEN 200.
      ENDIF.
      CLEAR: zspb4005-jocum, zspb4005-fperi, zspb4005-pdate, zspb4009-clrelt.

      " 전표 생성 프로그램 이동
    WHEN 'MOVE'.
      CALL TRANSACTION 'ZPB2030'. "AND SKIP FIRST SCREEN.


      " 역분개 프로그램 이동
    WHEN 'REVERSE'.
      PERFORM move_to_reverse_program.

    WHEN 'ENTER'.

    WHEN 'BACK'.
      LEAVE TO SCREEN 0.

    WHEN OTHERS.
  ENDCASE.

ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  EXIT  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE exit INPUT.

  CASE ok_code.

    WHEN 'EXIT'.
      LEAVE PROGRAM.

    WHEN 'CANC'.
      LEAVE TO SCREEN 0.

    WHEN OTHERS.
  ENDCASE.

ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0200  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0200 INPUT.

  " Detail Screen
  CASE ok_code.

    WHEN 'SEARCH'.

    WHEN 'MOVE2'. "CALL SCREEN 300 "Create Cleared Journal Entry
      "Screen 300에서의 반제할 전표 INFO 먼저 불러와야 됨

      " 이미 반제 처리 된 전표들은 반제 처리를 못하도록 막아둠 (SCRFEEN 300은 반제 처리하는 SCREEN이니까)(반제 처리 됐는지 조회하려면 전표 번호 한 번 클릭)
      DATA: "lt_rows TYPE lvc_t_row,
            ls_rows TYPE lvc_s_row.

      go_item_alv->get_selected_rows(
            IMPORTING
              et_index_rows = lt_rows    " Indexes of Selected Rows
*          et_row_no     =     " Numeric IDs of Selected Rows
          ).
      LOOP AT lt_rows INTO ls_rows.
        READ TABLE gt_jitem_list INTO gs_jitem_list INDEX ls_rows-index.
        IF sy-subrc EQ 0 AND gs_jitem_list-cflag = 'X'.
          MESSAGE i000(zmcpb) WITH '이미 반제 처리된 전표들 입니다.'.
          RETURN.
        ENDIF.
      ENDLOOP.


      "통화 기본값 처리
      zspb4009-waers = 'KRW'.

      "반제할 전표 금액 합계
      DATA lv_sum1 TYPE p DECIMALS 2 VALUE 0.
      DATA lv_sum2 TYPE p DECIMALS 2 VALUE 0.
      DATA lv_total TYPE p DECIMALS 2.

      CLEAR: lv_sum1, lv_sum2, lv_total.

      go_item_alv->get_selected_rows(
        IMPORTING
          et_index_rows = lt_rows    " Indexes of Selected Rows
*          et_row_no     =     " Numeric IDs of Selected Rows
      ).

      IF lt_rows IS INITIAL.
        MESSAGE i000(zmcpb) WITH '반제할 두 개의 전표를 선택해주세요.'.
        RETURN.
      ENDIF.


      CLEAR gt_clitem_list.
      LOOP AT lt_rows INTO ls_rows.
        READ TABLE gt_jitem_list INTO gs_jitem_list INDEX ls_rows-index.
        IF sy-subrc EQ 0.
          APPEND gs_jitem_list TO gt_clitem_list. "gt_clitem_list = SCREEN 300의 반제할 전표 LINE ITEM ALV

        ENDIF.
      ENDLOOP.

      LOOP AT gt_clitem_list INTO DATA(ls_clitem_list).
        IF ls_clitem_list-dbcrf = 'S'. "차변
          lv_sum1 = lv_sum1 + ls_clitem_list-price. "음수 표시는 LAYOUT에서 필트 텍스트에 V를 통해서 적용
        ELSEIF ls_clitem_list-dbcrf = 'H'. "대변
          lv_sum2 = lv_sum2 - ls_clitem_list-price.
        ENDIF.
      ENDLOOP.

      lv_total = lv_sum2 + lv_sum1.
      zspb4009-toprice = lv_total.


      "통화 필드 적용은 스트럭쳐 레퍼런스 필드를 내 스트럭쳐로 했어야 됐는데 테이블로 설정해둬서 생겼던 문제
      "layout에서도 연결이 끊기지 않도록 필드를 지우는 것이 아니라, 숨겨야만 가격과 통화가 제대로 연결이 됨
      "layout -> display -> invisible

      "반제 대상 전표 1 & 반제 대상 전표 2 INFO
      DATA: lv_stojocum TYPE zspb4009-stojocum,
            lv_sttjocum TYPE zspb4009-sttjocum.

      IF lines( lt_rows ) = 2.

        LOOP AT lt_rows INTO ls_rows." FROM 1 TO 2.
          READ TABLE gt_clitem_list INTO DATA(ls_clitem) INDEX sy-tabix.
          IF sy-tabix = 1.
            lv_stojocum = ls_clitem-jocum.
          ELSEIF sy-tabix = 2.
            lv_sttjocum = ls_clitem-jocum.
          ENDIF.
        ENDLOOP.

        zspb4009-stojocum = lv_stojocum.
        zspb4009-sttjocum = lv_sttjocum.

        "추가
        IF lv_stojocum = lv_sttjocum.
          MESSAGE i000(zmcpb) WITH '선택하신 두 전표는 동일한 헤더 번호를 가지고 있어 반제 처리가 불가능합니다.'.
          RETURN.
        ENDIF.


        CALL SCREEN 300.


      ELSEIF lines( lt_rows ) < 2.
        MESSAGE i000(zmcpb) WITH '반제할 두 개의 전표를 선택해주세요.'.
      ELSEIF lines( lt_rows ) > 2.
        MESSAGE i000(zmcpb) WITH '반제할 두 개의 전표만 선택해주세요.'.


      ENDIF.

      " 최신 alv 정보 select  (get 전표 item alv)
      PERFORM get_jitem USING zspb4007-jocum zspb4008-jocum.


    WHEN 'ENTER'.

    WHEN 'BACK'.
      LEAVE TO SCREEN 0.

    WHEN OTHERS.
  ENDCASE.

ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0300  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0300 INPUT.

  CASE ok_code.

    WHEN 'SEARCH'.

    WHEN 'EXECUTE2'. "반제 전표 생성 (=반제 처리)

      go_clitem_alv->get_selected_rows(
        IMPORTING
          et_index_rows = lt_rows    " Indexes of Selected Rows
*          et_row_no     =     " Numeric IDs of Selected Rows
      ).

      IF lt_rows IS INITIAL OR lines( lt_rows ) < 2.
        MESSAGE i000(zmcpb) WITH '반제할 두 개의 전표를 선택해주세요.'.
        RETURN.
      ENDIF.

      IF zspb4009-toprice <> 0.
        MESSAGE e000(zmcpb) WITH '차변과 대변의 합이 0이 아닙니다.'.
        RETURN.
      ENDIF.

      " 이미 반제 처리된 전표가 있는지 체크
      LOOP AT lt_rows INTO ls_rows.
        READ TABLE gt_clitem_list INTO gs_clitem_list INDEX sy-tabix.
        IF sy-subrc EQ 0 AND gs_clitem_list-cflag = 'X'.
          MESSAGE i000(zmcpb) WITH '이미 반제 처리된 전표 입니다.'.
          RETURN.
        ENDIF.
      ENDLOOP.


      " 넘버레인지 채번 -> 반제전표번호 생성. <ZNRPB4021> gv_cljocum
      PERFORM get_numberrange.

*      CLEAR gt_clitem_list.
      LOOP AT lt_rows INTO ls_rows.
*        READ TABLE gt_clitem_list INTO gs_clitem_list INDEX sy-tabix.
        READ TABLE gt_clitem_list INTO gs_clitem_list INDEX ls_rows-index.
        IF sy-subrc EQ 0.


          UPDATE ztpbjonli
            SET cflag = 'X'
                 cljocum = gv_cljocum  " 생성된 반제전표 번호 넣기
                 cldate = sy-datum

          WHERE jocum = gs_clitem_list-jocum
            AND itnum = gs_clitem_list-itnum.

          "alv에 반영
          IF sy-subrc = 0.
            zspb4009-clstat = '반제 불가능'.
            gs_clitem_list-cflag = 'X'.
            gs_clitem_list-cflagi = '@01@'. "체크 아이콘
            gs_clitem_list-cljocum = gv_cljocum. " 생성된 반제전표 번호 넣기
            gs_clitem_list-cldate = sy-datum.
            MODIFY gt_clitem_list FROM gs_clitem_list INDEX ls_rows-index.
          ELSEIF sy-subrc <> 0.
            MESSAGE i000(zmcpb) WITH 'DB 반제여부 정보 업데이트를 실패하였습니다.'.
            EXIT.
          ENDIF.
        ENDIF.
      ENDLOOP.

      COMMIT WORK. "DB에 UPDATE된 데이터 반영


      DATA lv_exec_result TYPE char14.
      lv_exec_result = ''. "초기화

      LOOP AT gt_clitem_list INTO gs_clitem_list.
        IF gs_clitem_list-cflag = 'X'.
          lv_exec_result = '반제 처리 성공'.
          EXIT.
        ENDIF.
      ENDLOOP.
      zspb4009-clrelt = lv_exec_result.
*      zspb4009-clstat = '반제 불가-반제 완료'.


    WHEN 'ENTER'.

    WHEN 'BACK'.

      LEAVE TO SCREEN 0.
      CLEAR:  zspb4009-stojocum, zspb4009-sttjocum, zspb4009-toprice, zspb4009-clrelt, zspb4009-clstat.
    WHEN OTHERS.
  ENDCASE.

ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  EXIT2  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE exit2 INPUT.

  CASE ok_code.

    WHEN 'ENTER'.
      LEAVE TO SCREEN 0.

    WHEN 'CLOSE'.
      LEAVE TO SCREEN 0.

    WHEN OTHERS.
  ENDCASE.

ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0400  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0400 INPUT.

  CASE ok_code.
    WHEN 'BACK'.
      LEAVE TO SCREEN 0.
    WHEN OTHERS.
  ENDCASE.

ENDMODULE.

----------------------------------------------------------------------------------
Extracted by Mass Download version 1.5.5 - E.G.Mellodew. 1998-2025. Sap Release 750
